system {
  host-name {{HostName}};
}
{% set ns = namespace (loopback = "0.0.0.0") %}
interfaces {
{%- for Interface, Items in Interfaces.items() %}
  {%- if 'P' in Items.MPLS  %}
    {{Interface}} {
    description vers-{{Items.ConnectedTo}};
       unit 0 {
         family inet address {{Items.IP}};
         family mpls;
         family iso;
        }
     }
  {%- endif %}
  {%- if Interface == 'lo0' %}
    {% set ns.loopback = Items.IP %}
    {{Interface}} {
      unit 0 {
        family inet address {{Items.IP}}/32;
        {%- if 'P' in HostName %}
          family iso {
              address {{Items.ISO}};
          }
        {%- endif %}        
      }
    }
  {%- endif %}
{%- endfor %}
}
routing-options {
  router-id {{ ns.loopback }};
  route-distinguisher-id {{ ns.loopback }};
  autonomous-system {{AS}};
  forwarding-table export ECMP dynamic-list-next-hop ecmp-fast-reroute;
}
protocols {
{% if 'P' in HostName %}
  {%- if RSVP == 'y' %}
  rsvp {
  {%- for Interface, Items in Interfaces.items() %}
    {%- if Items.MPLS == 'RSVP' %}
        interface {{Interface}}.0 {
            link-protection;
        }
    {%- endif %}
  {%- endfor %}
  }
  {%- endif %}
  mpls {
  {%- for Interface, Items in Interfaces.items() %}
    {%- if Items.MPLS == 'RSVP' %}
        interface {{Interface}}.0;
    {%- endif %}
  {%- endfor %}
        interface lo0.0;
  }  
{%- endif %}
  isis {
    export ISIS-L2-to-L1;
    lsp-lifetime 65535;
    spf-options {
      delay 50;
      holddown 2000;
    }
    level 1 {
            wide-metrics-only;
    }
    level 2 {
            wide-metrics-only;
    }

      {%- for Interface, Items in Interfaces.items() %}
        {%- if Items.MPLS == 'RSVP' %}
          interface {{Interface}}.0 {
          point-to-point;
          level 2 metric 10;
          level 1 disable;
          }
        {%- endif %}
        {%- if Items.MPLS == 'LDP' %}
          interface {{Interface}}.0 {
          point-to-point;
          level 1 metric 50;
          level 2 disable;
          }          
        {%- endif %}
      {%- endfor %}
      interface lo0.0;
      interface all {
        ldp-synchronization;
      }   
  }
  lldp {
    port-id-subtype interface-name;
    interface all;
  }

    {% if 'PE' in HostName %}
      bgp {
        group Backbone-AS65000 {
          type internal;
          local-address {{ ns.loopback }};
          family inet-vpn any;
          {% if RR == 'y' %}
            cluster {{ ns.loopback }};
            neighbor 10.0.0.5;
            neighbor 10.0.0.6;
            neighbor 10.0.0.11;
            neighbor 10.0.0.12;
            neighbor 10.0.0.13;
            neighbor 10.0.0.14;
            neighbor 10.0.0.10;           
            {%- if 'PE1' in HostName %}
              neighbor 10.0.0.2;
            {% else %}
              neighbor 10.0.0.1;
            {%- endif %}  
          {% else %}
            neighbor 10.0.0.1;
            neighbor 10.0.0.2;
          {%- endif %}
        }
      }  
    {%- endif %}
}
policy-options {
  policy-statement ECMP {
    then {
      load-balance per-packet;
    }
  }
  policy-statement CE-ROUTES {
    term a {
      from protocol [ ospf direct ];
      then accept;
    }
    term b {
      then reject;
    }
  }
    policy-statement ISIS-L2-to-L1 {
        term 1 {
            from {
                protocol isis;
                level 2;
                tag 2;
            }
            to {
                protocol isis;
                level 1;
            }
            then accept;
        }
        term 2 {
            from {
                protocol isis;
                level 2;
                tag 1;
            }
            to {
                protocol isis;
                level 1;
            }
            then accept;
        }
        term 3 {
            from {
                protocol isis;
                level 2;
                route-filter 10.10.0.0/8 prefix-length-range /32-/32;
            }
            to {
                protocol isis;
                level 1;
            }
            then accept;
        }
        term 4 {
            from {
                protocol isis;
                level 1;
            }
            to {
                protocol isis;
                level 2;
            }
            then accept;
        }
        term 5 {
            from {
                protocol static;
                tag 1;
            }
            to protocol isis;
            then accept;
        }
        term 6 {
            from {
                protocol static;
                tag 2;
            }
            to protocol isis;
            then accept;
        }
    }
}
